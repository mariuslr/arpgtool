**Free
ctl-opt nomain;
/COPY ARPG_H,ARCALLCTL
//---------------------------------------------------------------*
// files
//---------------------------------------------------------------*
dcl-f ARFLSTV disk
              usage(*update:*delete:*output)
              keyed;

//---------------------------------------------------------------*
// extern prototypes
//---------------------------------------------------------------*
/COPY ARPG_H,ARCLSTA
/COPY ARPG_H,ARCIFSR
/COPY ARPG_H,ARCDATE
/COPY ARPG_H,ARCYAJL
/COPY ARPG_H,ARCQMH

//---------------------------------------------------------------*
// global variables
//---------------------------------------------------------------*

//---------------------------------------------------------------*
// global data structures
//---------------------------------------------------------------*

//---------------------------------------------------------------*
// LogStashWriteMessage
//---------------------------------------------------------------*
//* Format and write a message.
//*
//* @param pInDest - Socket or file to write().
//* @param pDsMsd - Message likeds(LogStash01_t)
//*
//* @return 0 - successful else -1.
//*
//* @Author S.Allbach
//---------------------------------------------------------------*
dcl-proc LogStashWriteMessage export;
  dcl-pi *N int(10);
    pInDest int(10) value;
    pDsMsd likeds(LogStash01_t) value;
    pDsSettings likeds(LogStash_t) value;
  end-pi;

  dcl-s pTsTime timestamp;
  dcl-s pAnOffc varchar(6) inz('');

  dcl-s pAnLvl1 varchar(65535);
  dcl-s pAnLvl2 varchar(65535);
  dcl-s pAnMsg  varchar(65535);

  dcl-ds pDsJob likeds(job_t);

  if pDsMsd.QMHSEV < pDsSettings.minserv;
    return 0;
  endif;

  pDsJob = pDsMsd.QMHJOB;

  // format timestamp
  pTsTime = pDsMsd.QMHDAT + pDsMsd.QMHTIM + %mseconds(pDsMsd.QMHMSC); // Local
  if pDsSettings.useutc; // UTC time
    pTsTime = DatAdjTs(pTsTime);
    if pDsSettings.utcoffset; // Offset
      pAnOffc = '+00:00';
    endif;
  elseif pDsSettings.utcoffset; // Offset
    pAnOffc = DatGetUtcOffset(pTsTime);
  endif;

  pAnMsg = %char(%date(pTsTime):*iso)
           + 'T'
           + %char(%time(pTsTime):*hms)
           + '.'
           + %editc(pDsMsd.QMHMSC:'X')
           + pAnOffc
           + pDsSettings.fieldsep
           + %trimr(pDsMsd.QMHSYS) // host
           + pDsSettings.fieldsep
           + %trimr(pDsJob.jobnumber) // job
                         + '/'
                         + %trimr(pDsJob.jobuser)
                         + '/'
                         + %trimr(pDsJob.jobname)
           + pDsSettings.fieldsep
           + StrBytesToHexStr(pDsMsd.QMHTID // Task
                              :%size(pDsMsd.QMHTID)
                              :pDsSettings.hexcase)
           + %trimr(pDsMsd.QMHMID) // Id
           + pDsSettings.fieldsep
           + %trimr(%subst(pDsMsd.QMHTYP:2)) // Type
           + pDsSettings.fieldsep
           + %trimr(pDsMsd.QMHFUS); // User

  // Sender
  if pDsMsd.QMHSTY = '0' Or pDsMsd.QMHSTY = '3';
    pAnMsg += pDsSettings.fieldsep
              + %trimr(pDsMsd.QMHLSP)
              + '.'
              + %trimr(pDsMsd.QMHSTM);

  else; //if pDsMsd.QMHSTY = '1' Or pDsMsd.QMHSTY = '2';
    pAnMsg += pDsSettings.fieldsep
              + %trimr(pDsMsd.QMHSPG)
              + '.'
              + %trimr(pDsMsd.QMHSMD)
              + '.'
              + %trimr(pDsMsd.QMHCSP)
              + '.'
              + %trimr(pDsMsd.QMHSTM);
  endif;

  LogStashGetMsgText(pDsMsd:pDsSettings.linesep:pDsSettings.ccsid:pAnLvl1:pAnLvl2);
  pAnLvl1 = %trim(pAnLvl1);
  pAnLvl2 = %trim(pAnLvl2);
  if %bitand(pDsSettings.seclvl:LSTASH_SECLVL_CONCAT) <> FALSE;
    pAnMsg += pDsSettings.fieldsep + pAnLvl1 + pDsSettings.linesep + pAnLvl2;
  else;
    pAnMsg += pDsSettings.fieldsep + pAnLvl1;
  endif;

  if %bitand(pDsSettings.seclvl:LSTASH_SECLVL_SEP) <> FALSE And
        %len(pAnLvl2) > 0;
    if %len(pAnLvl2) > %len(pDsSettings.linesep) And
          %subst(pAnLvl2:1:%len(pDsSettings.linesep)) = pDsSettings.linesep;
      pAnLvl2 = %triml(%subst(pAnLvl2:%len(pDsSettings.linesep) + 1));
    endif;
    pAnMsg += pDsSettings.fieldsep + pAnLvl2;
  endif;

  // add user vars
  setll (pDsJob.jobname:pDsJob.jobuser:pDsJob.jobnumber:*loval) ArfLstvr;
  reade (pDsJob.jobname:pDsJob.jobuser:pDsJob.jobnumber) ArfLstvr;
  dow not %eof;
    pAnMsg += pDsSettings.fieldsep
              + LvVar + '=' + LvVal;
    reade (pDsJob.jobname:pDsJob.jobuser:pDsJob.jobnumber) ArfLstvr;
  enddo;

  if IfsWriteFile(pInDest:pAnMsg + LF:%len(pAnMsg) + %size(LF)) <> %len(pAnMsg);
    // error message ...
    return -1;
  endif;

  return 0;

end-proc LogStashWriteMessage;
