**Free
/COPY ARPG_H,ARCALLCTL
//---------------------------------------------------------------*
// extern prototypes
//---------------------------------------------------------------*
/COPY ARPG_H,ARCLSTA
/COPY ARPG_H,ARCIFSR
/COPY ARPG_H,ARCDATE
/COPY ARPG_H,ARCYAJL
/COPY ARPG_H,ARCQMH
/COPY ARPG_H,ARCNETDB
/COPY ARPG_H,ARCSOCKET
/COPY ARPG_H,ARCQFILE

//---------------------------------------------------------------*
// ArStrLogrr
//---------------------------------------------------------------*
  dcl-pi ArStrLogrr;
	gAnServer varchar(128) const;
	gInPort int(10) const; 
	gDsLogFile likeds(file_t) const;
	gInSecLvl int(10) const;
	gInDelay int(10) const;
	gInCcsid int(10) const;
  end-pi;  

  dcl-ds pDsSettings likeds(LogStash_t) inz(*likeds);

  // settings
  pDsSettings.logfile = gDsLogFile.name;
  pDsSettings.loglib  = gDsLogFile.lib;
  pDsSettings.seclvl  = gInSecLvl;
  pDsSettings.server  = gInDelay;
  pDsSettings.ccsid   = gInCcsid;

  LogStashStartLogger(%Paddr(Connection):pDsSettings);

  *inlr = *on;

//---------------------------------------------------------------*
// Connection
//---------------------------------------------------------------*
dcl-proc Connection;
  dcl-pi *N int(10);
  end-pi;

  dcl-s pInSocket int(10);
  dcl-s pInIP uns(10);
 
  dcl-s pPtHostent pointer;
  dcl-ds pDsHostent likeds(hostent_t) based(pPthostent);
  dcl-s pPtAddr pointer based(pDsHostent.h_addr_list);
  dcl-s pUlAddr uns(10) based(pPtAddr);

  dcl-ds pDsSockaddr likeds(sockaddr_in_t);

  pInIP = inet_Addr(%trim(gAnServer));
  if pInIP = INADDR_NONE;
    pPtHostent = getHostByName(%trim(gAnServer));
    if pPthostent <> *Null;
      pInIP = pUlAddr;
    endif;
  endif;

   if pInIP = INADDR_NONE;
     return -1; // error connect failed
   endif;

  // create socket
  pInSocket = socket(AF_INET:SOCK_STREAM:IPPROTO_IP);

  // Populate the sockaddr_in structure
  pDsSockaddr.sin_family = AF_INET;
  pDsSockaddr.sin_addr = pInIP;
  pDsSockaddr.sin_port = gInPort;
  pDsSockaddr.sin_zero = *allx'00';

  // connect to a server
  if connect(pInSocket : %addr(pDsSockaddr) : %size(pDsSockaddr)) < 0 ;
    return -1; // error connect failed
  endif;

  return pInSocket;

end-proc Connection;
