**Free
ctl-opt nomain;
/COPY ARPG_H,ARCALLCTL
//---------------------------------------------------------------*
// extern prototypes
//---------------------------------------------------------------*
/COPY ARPG_H,ARCSQLR
/COPY ARPG_H,ARCERRNO

/COPY RPGUNIT1,TESTCASE

//---------------------------------------------------------------*
// test_Sql_Statement
//---------------------------------------------------------------*
dcl-proc XsetUp export;

  exec sql set option commit=*none;
  
  //exec sql CREATE OR REPLACE TABLE TSTARSSQLF 
  //            (F_CHAR FOR COLUMN S_CHAR1 CHAR (64 ) CCSID 37, 
  //             F_VARCHAR FOR COLUMN S_VCHAR1 VARCHAR (64 ) CCSID 37,             
  //             F_INT FOR COLUMN S_INT INTEGER , 
  //             F_BIG FOR COLUMN S_BIG BIGINT , 
  //             F_SMALL FOR COLUMN S_SMALL SMALLINT , 
  //             F_PACK FOR COLUMN S_PACK DEC (15 , 2), 
  //             F_NUM FOR COLUMN S_NUM NUMERIC (15 , 2), 
  //             F_DATE FOR COLUMN S_DATE DATE ,     
  //             F_TIME FOR COLUMN S_TIME TIME , 
  //             F_TIMESTAMP FOR COLUMN S_TIMES TIMESTAMP );
  
  //exec sql Label on Column TSTARSSQLF 
  //            (F_CHAR is 'lbl_f_char',
  //             F_VARCHAR is 'lbl_f_varchar',             
  //             F_INT is 'lbl_f_int', 
  //             F_BIG is 'lbl_f_big', 
  //             F_SMALL is 'lbl_f_small', 
  //             F_PACK is 'lbl_f_pack', 
  //             F_NUM is 'lbl_f_num', 
  //             F_DATE is 'lbl_f_date',     
  //             F_TIME is 'lbl_f_time', 
  //             F_TIMESTAMP is 'lbl_f_timestamp' );
               
  //exec sql Label on Column TSTARSSQLF 
  //            (F_CHAR text is 'txt_f_char',
  //             F_VARCHAR text is 'txt_f_varchar',             
  //             F_INT text is 'txt_f_int', 
  //             F_BIG text is 'txt_f_big', 
  //             F_SMALL text is 'txt_f_small', 
  //             F_PACK text is 'txt_f_pack', 
  //             F_NUM text is 'txt_f_num', 
  //             F_DATE text is 'txt_f_date',     
  //             F_TIME text is 'txt_f_time', 
  //             F_TIMESTAMP text is 'txt_f_timestamp' );
               
  //exec sql INSERT INTO TSTARSSQLF VALUES(
  //          '1char äöüß?',
  //          '1varchar äöüß?', 
  //          123456789, 
  //          12345678901234, 
  //          123, 
  //          12345.12,  
  //          12345.12, 
  //          '2018-08-04', 
  //          '16.22.17', 
  //          '2018-08-04-16.22.17.123456');                                                                         
                                                                       
  //exec sql INSERT INTO TSTARSSQLF VALUES(
  //          '2char äöüß?', 
  //          '2varchar äöüß?', 
  //          223456789, 
  //          22345678901234, 
  //          223, 
  //          22345.12,  
  //          22345.12, 
  //          '2018-08-05', 
  //          '17.22.17', 
  //          '2018-08-05-17.22.17.123456');                                                                         

  //exec sql INSERT INTO TSTARSSQLF VALUES(
  //          '3char äöüß?', 
  //          '3varchar äöüß?', 
  //          323456789, 
  //          32345678901234, 
  //          323, 
  //          32345.12,  
  //          32345.12, 
  //          '3218-08-06', 
  //          '18.22.17', 
  //          '2018-08-06-18.22.17.123456');                                                                         

end-proc XsetUp;
//---------------------------------------------------------------*
// test_Sql_Statement
//---------------------------------------------------------------*
dcl-proc Xtest_Sql_Statement export;

  dcl-s pInResultSet int(10);

  //pinResultSet = SqlStatement('Select * from TSTARSSQLF');
  //dow SqlRsNext(inResultSet);

  //enddo;
  //SqlRsClose(pinResultSet);
  
end-proc Xtest_Sql_Statement;
//---------------------------------------------------------------*
// test_Sql_PreparedStatement
//---------------------------------------------------------------*
dcl-proc test_Sql_PreparedStatement export;

  dcl-s pInPreparedSt int(10);
  dcl-s pInResultSet int(10);

  dcl-s F_CHAR char(1024);
  dcl-s F_CHAR_1208 ucs2(1024);
  dcl-s F_VARCHAR varchar(1024);
  dcl-s F_VARCHAR_1208 varucs2(1024);  
  dcl-s F_GRAPHIC ucs2(1024);
  dcl-s F_VARGRAPHIC varucs2(1024); 
               //   dcl-s F_CLOB, - 
               //  dcl-s F_BLOB, - 
  dcl-s F_INT int(10);
  dcl-s F_BIG int(20);
  dcl-s F_SMALL int(5);
  dcl-s F_PACK packed(30:11);
  dcl-s F_NUM zoned(30:11);
  dcl-s F_DATE date;
  dcl-s F_TIME time; 
  dcl-s F_TIMESTAMP timestamp;
  dcl-s i int(10);

  // select * from SYSIXADV
  //pInPreparedSt = SqlPreparedStatement('Select * from SYSFEATURE');   
  //pInPreparedSt = SqlPreparedStatement('Select -
  //             F_CHAR, -
  //             F_VARCHAR, -             
  //             F_INT, - 
  //             F_BIG, - 
  //             F_SMALL, - 
  //             F_PACK, - 
  //             F_NUM, - 
  //             F_DATE, -     
  //             F_TIME, - 
  //             F_TIMESTAMP from TSTARSSQLF');
  F_VARCHAR = 'Select * from SYSFEATURE -
                WHERE FEATURE_ID like ? and FEATURE_NAME like ?'; 
  pInPreparedSt = SqlPreparedStatement(F_VARCHAR);
  SqlPreparedStatementSetString(pInPreparedSt:'%2%');
  SqlPreparedStatementSetString(pInPreparedSt:'%table%');
 
  pInResultSet = SqlPreparedStatementExecuteQuery(pInPreparedSt);
  dow SqlRsNext(pInResultSet);

    for i=1 by 1 to SqlRsGetColumnCount(pInResultSet);
      F_CHAR = SqlRsGetString(pInResultSet:i);
    endfor;

  enddo;
  SqlRsClose(pInResultSet);
  SqlPreparedStatementFree(pInPreparedSt);

  // Test Update
  F_VARCHAR = 'INSERT INTO SALLBACH2/TSTARSSQLF (F1) VALUES(?)';    
  pInPreparedSt = SqlPreparedStatement(F_VARCHAR);
                    
  SqlPreparedStatementSetDecimal(pInPreparedSt:10);                 
  SqlPreparedStatementExecuteUpdate(pInPreparedSt);
  
  SqlPreparedStatementClearParameters(pInPreparedSt);                 
  SqlPreparedStatementSetDecimal(pInPreparedSt:11);                 
  SqlPreparedStatementExecuteUpdate(pInPreparedSt);
                   
  SqlPreparedStatementFree(pInPreparedSt);                            

  // execute again
  //pInResultSet = SqlPreparedStatementExecuteQuery(pInPreparedSt);
  //dow SqlRsNext(pInResultSet);
 
  //enddo;
  //SqlRsClose(pInResultSet);    	

  // close and free all resources 
  //SqlPreparedStatementFree(pInPreparedSt);

end-proc test_Sql_PreparedStatement;
