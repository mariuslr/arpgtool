**Free
ctl-opt nomain;
/COPY ARPG_H,ARCALLCTL
//---------------------------------------------------------------*
// extern prototypes
//---------------------------------------------------------------*
/COPY ARPG_H,ARCSQLR
/COPY ARPG_H,ARCERRNO
/COPY ARPG_H,ARCFCNTL

/COPY RPGUNIT1,TESTCASE

//---------------------------------------------------------------*
// test_Sql_Statement
//---------------------------------------------------------------*
dcl-proc setUp export;
   
  //exec sql Label on Column TSTARSSQLF 
  //            (F_CHAR is 'lbl_f_char',
  //             F_VARCHAR is 'lbl_f_varchar',             
  //             F_INT is 'lbl_f_int', 
  //             F_BIG is 'lbl_f_big', 
  //             F_SMALL is 'lbl_f_small', 
  //             F_PACK is 'lbl_f_pack', 
  //             F_NUM is 'lbl_f_num', 
  //             F_DATE is 'lbl_f_date',     
  //             F_TIME is 'lbl_f_time', 
  //             F_TIMESTAMP is 'lbl_f_timestamp' );
               
  //exec sql Label on Column TSTARSSQLF 
  //            (F_CHAR text is 'txt_f_char',
  //             F_VARCHAR text is 'txt_f_varchar',             
  //             F_INT text is 'txt_f_int', 
  //             F_BIG text is 'txt_f_big', 
  //             F_SMALL text is 'txt_f_small', 
  //             F_PACK text is 'txt_f_pack', 
  //             F_NUM text is 'txt_f_num', 
  //             F_DATE text is 'txt_f_date',     
  //             F_TIME text is 'txt_f_time', 
  //             F_TIMESTAMP text is 'txt_f_timestamp' );
               
  //exec sql INSERT INTO TSTARSSQLF VALUES(
  //          '1char äöüß?',
  //          '1varchar äöüß?', 
  //          123456789, 
  //          12345678901234, 
  //          123, 
  //          12345.12,  
  //          12345.12, 
  //          '2018-08-04', 
  //          '16.22.17', 
  //          '2018-08-04-16.22.17.123456');                                                                         
                                                                       
  //exec sql INSERT INTO TSTARSSQLF VALUES(
  //          '2char äöüß?', 
  //          '2varchar äöüß?', 
  //          223456789, 
  //          22345678901234, 
  //          223, 
  //          22345.12,  
  //          22345.12, 
  //          '2018-08-05', 
  //          '17.22.17', 
  //          '2018-08-05-17.22.17.123456');                                                                         

  //exec sql INSERT INTO TSTARSSQLF VALUES(
  //          '3char äöüß?', 
  //          '3varchar äöüß?', 
  //          323456789, 
  //          32345678901234, 
  //          323, 
  //          32345.12,  
  //          32345.12, 
  //          '3218-08-06', 
  //          '18.22.17', 
  //          '2018-08-06-18.22.17.123456');                                                                         

end-proc setUp;
//---------------------------------------------------------------*
// test_Sql_PreparedStatement
//---------------------------------------------------------------*
dcl-proc test_Sql_PreparedStatement export;

  dcl-s PInConnection int(10);
  dcl-s pInPreparedSt int(10);
  dcl-s pInResultSet int(10);
  dcl-s i int(10);

  dcl-c TEST_COLS 10;
  dcl-c TEST_ROWS 15;

  PInConnection = SqlConnection();
  assert(PInConnection > 0:'Connection fail');

  iEqual(0
        :SqlConnectionExecuteUpdate(PInConnection
                   :'Create Or Replace Table Qtemp/TSTARSSQLF ( ' +
	               ' F_CHAR FOR COLUMN S_CHAR1 CHAR (64 ) CCSID 37 ' + 
	               ',F_VARCHAR FOR COLUMN S_VCHAR1 VARCHAR (64 ) CCSID 37 ' +
	               ',F_INT FOR COLUMN S_INT INTEGER ' + 
	               ',F_BIG FOR COLUMN S_BIG BIGINT ' + 
	               ',F_SMALL FOR COLUMN S_SMALL SMALLINT ' + 
	               ',F_PACK FOR COLUMN S_PACK DEC (15 , 2) ' +
	               ',F_NUM FOR COLUMN S_NUM NUMERIC (15 , 2) ' +
	               ',F_DATE FOR COLUMN S_DATE DATE ' +     
	               ',F_TIME FOR COLUMN S_TIME TIME ' + 
	               ',F_TIMESTAMP FOR COLUMN S_TIMES TIMESTAMP ' +   
	               ' )')
          );    
  
  iEqual(0
        :SqlConnectionExecuteUpdate(PInConnection
                   :'Label on Column Qtemp/TSTARSSQLF ( ' +
	               ' F_CHAR is ''lbl_f_char'' ' + 
	               ',F_VARCHAR is ''lbl_f_varchar'' ' +
	               ',F_INT is ''lbl_f_int'' ' + 
	               ',F_BIG is ''lbl_f_big'' ' + 
	               ',F_SMALL is ''lbl_f_small'' ' + 
	               ',F_PACK is ''lbl_f_pack'' ' +
	               ',F_NUM is ''lbl_f_num'' ' +
	               ',F_DATE is ''lbl_f_date'' ' +     
	               ',F_TIME is ''lbl_f_time'' ' + 
	               ',F_TIMESTAMP is ''lbl_f_timestamp'' ' +    
	               ' )')
          );    

  iEqual(0
        :SqlConnectionExecuteUpdate(PInConnection
                   :'Label on Column Qtemp/TSTARSSQLF ( ' +
	               ' F_CHAR text is ''txt_f_char'' ' + 
	               ',F_VARCHAR text is ''txt_f_varchar'' ' +
	               ',F_INT text is ''txt_f_int'' ' + 
	               ',F_BIG text is ''txt_f_big'' ' + 
	               ',F_SMALL text is ''txt_f_small'' ' + 
	               ',F_PACK text is ''txt_f_pack'' ' +
	               ',F_NUM text is ''txt_f_num'' ' +
	               ',F_DATE text is ''txt_f_date'' ' +     
	               ',F_TIME text is ''txt_f_time'' ' + 
	               ',F_TIMESTAMP text is ''txt_f_timestamp'' ' +
	               ' )')
          );    
          
              
  i = SqlConnectionExecuteUpdate(PInConnection
                :'Delete From Qtemp/TSTARSSQLF');
  assert(i=0 or i=100:'Delete Qtemp/TSTARSSQLF fail');    
  
  // TODO insert NULL and BLOB values
  
  // Insert data
  pInPreparedSt = SqlConnectionPrepareStatement(PInConnection
                    :'Insert into Qtemp/TSTARSSQLF -
                       (F_CHAR, F_VARCHAR, F_INT, F_BIG, F_SMALL, - 
                        F_PACK, F_NUM, F_DATE, F_TIME, F_TIMESTAMP) -
                       Values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) -
                     '
                    );
  assert(pInPreparedSt > 0:'Prepared insert fail');
    
  for i=1 by 1 to TEST_ROWS;                  
    iEqual(0:SqlPreparedStatementClearParameters(pInPreparedSt));                 
    iEqual(0:SqlPreparedStatementSetString(pInPreparedSt:'char ' + %char(i)));                 
    iEqual(0:SqlPreparedStatementSetString(pInPreparedSt:'varchar ' + %char(i)));                 
    iEqual(0:SqlPreparedStatementSetLong(pInPreparedSt:i));                 
    iEqual(0:SqlPreparedStatementSetLong(pInPreparedSt:i+10));                 
    iEqual(0:SqlPreparedStatementSetLong(pInPreparedSt:i+20));                 
    iEqual(0:SqlPreparedStatementSetDecimal(pInPreparedSt:i+30));                 
    iEqual(0:SqlPreparedStatementSetDecimal(pInPreparedSt:i+40));                 
    iEqual(0:SqlPreparedStatementSetDate(pInPreparedSt:d'2018-10-01' + %days(i)));                 
    iEqual(0:SqlPreparedStatementSetTime(pInPreparedSt:t'01.00.00' + %minutes(i)));                 
    iEqual(0:SqlPreparedStatementSetTimeStamp(pInPreparedSt
                                      :z'2018-10-01-01.00.00.000000'
                                       + %days(i) + %minutes(i)));                 
    iEqual(0:SqlPreparedStatementExecuteUpdate(pInPreparedSt));
  endfor;
  
  iEqual(0:SqlPreparedStatementFree(pInPreparedSt));                            

  // Read data
  pInPreparedSt = SqlConnectionPrepareStatement(PInConnection
                                      :'Select * From Qtemp/TSTARSSQLF -
                                        Where F_CHAR like ? And F_INT > ? - 
                                       ');
  assert(pInPreparedSt > 0:'Prepare select fail');

  // Set parameters
  iEqual(0:SqlPreparedStatementClearParameters(pInPreparedSt));                 
  iEqual(0:SqlPreparedStatementSetString(pInPreparedSt:'char%'));                 
  iEqual(0:SqlPreparedStatementSetLong(pInPreparedSt:0));                 

  // read
  i = 0;
  pInResultSet = SqlPreparedStatementExecuteQuery(pInPreparedSt);
  iEqual(TEST_COLS:SqlResultSetGetColumnCount(pInResultSet));
  dow SqlResultSetNext(pInResultSet);
    i+= 1;
    
    aEqual('char ' + %char(i)
          :SqlResultSetGetString(pInResultSet:1));                 
    aEqual('varchar ' + %char(i)
          :SqlResultSetGetString(pInResultSet:2));                 
    iEqual(i
          :SqlResultSetGetLong(pInResultSet:3));                 
    iEqual(i+10
          :SqlResultSetGetLong(pInResultSet:4));                 
    iEqual(i+20
          :SqlResultSetGetLong(pInResultSet:5));                 
    iEqual(i+30
          :SqlResultSetGetDecimal(pInResultSet:6));                 
    iEqual(i+40
          :SqlResultSetGetDecimal(pInResultSet:7));                 
    aEqual(%char(d'2018-10-01' + %days(i))
          :%char(SqlResultSetGetDate(pInResultSet:8)));                 
    aEqual(%char(t'01.00.00' + %minutes(i))
          :%char(SqlResultSetGetTime(pInResultSet:9)));                 
    aEqual(%char(z'2018-10-01-01.00.00.000000' + %days(i) + %minutes(i))
          :%char(SqlResultSetGetTimeStamp(pInResultSet:10)));
  enddo;
  
  iEqual(TEST_ROWS:i);
  // -- !? iEqual(0:SqlResultSetClose(pInResultSet));
  iEqual(0:SqlPreparedStatementFree(pInPreparedSt));
  iEqual(0:SqlConnectionClose(PInConnection));                            
               
end-proc test_Sql_PreparedStatement;
//---------------------------------------------------------------*
// test_Sql_Statement
//---------------------------------------------------------------*
dcl-proc test_Sql_Lob export;

  dcl-s PInConnection int(10);
  dcl-s pInResultSet int(10);
  dcl-s i int(10);
  dcl-s PAnStr varchar(1024);
  dcl-s pInClob int(10);
  dcl-s pInLength int(10);

  PInConnection = SqlConnection();
  assert(PInConnection > 0:'Connection fail');
  SqlConnectionSetPackage(PInConnection:'T_ARSSQLRC':'QTEMP');
  SqlConnectionSetCommitControl(PInConnection:SQL_COMMIT_CONTROL_CHG);

  pInResultSet = SqlConnectionExecuteQuery(PInConnection:
    'select ''Däne'' fld1varchar, -                            
       cast(''Däne'' as dbclob(4)) fld2dbclob, -          
       cast(''Däne'' as clob(4)) fld3clob, -           
       cast(''Däne'' as clob(4) ccsid 1208) fld4clob1208, - 
       cast(''Däne'' as blob(4)) fld5blob -
     from qsqptabl');                                     

  dow SqlResultSetNext(pInResultSet);
    pAnStr = SqlResultSetGetString(pInResultSet:1);
    pAnStr = SqlResultSetGetString(pInResultSet:2);
    
    pInClob = SqlResultSetGetClob(pInResultSet:3);
    pInLength = SqlClobLength(pInClob);
    pAnStr = SqlClobGetSubString(pInClob:1:pInLength);
    
    pAnStr = SqlResultSetGetString(pInResultSet:4);
    pAnStr = SqlResultSetGetString(pInResultSet:5);
  enddo;  
  
  //iEqual(0:SqlPreparedStatementFree(pInPreparedSt));
  iEqual(0:SqlConnectionClose(PInConnection));                            

end-proc;
//---------------------------------------------------------------*
// test_Sql_Statement
//---------------------------------------------------------------*
dcl-proc test_Sql_Xml export;

  dcl-s PInConnection int(10);
  dcl-s pInResultSet int(10);
  dcl-s i int(10);
  dcl-s PAnStr varchar(1024);

  PInConnection = SqlConnection();
  assert(PInConnection > 0:'Connection fail');

  pInResultSet = SqlConnectionExecuteQuery(PInConnection:
    'select ''field 1'' as "Long_Field_Name_Field1", - 
            xmlserialize( -                             
              xmldocument( -                           
                xmlelement(name "root", ''däten'') -    
                        ) -                           
                        as clob(1024)) as xmldoc, -    
            ''field 2'' as "Long_Field_Name_Field2" - 
     from sysfuncs');                                     

  dow SqlResultSetNext(pInResultSet);
    PAnStr = SqlResultSetGetString(pInResultSet:1);
    PAnStr = SqlResultSetGetString(pInResultSet:2);
    PAnStr = SqlResultSetGetString(pInResultSet:3);
  enddo;  
  
  //iEqual(0:SqlPreparedStatementFree(pInPreparedSt));
  iEqual(0:SqlConnectionClose(PInConnection));                            

end-proc;
